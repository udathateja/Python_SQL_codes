-- Convert the funding_total_usd and founded_at_clean columns in the 
-- tutorial.crunchbase_companies_clean_date table to strings (varchar format) using a different formatting 
-- function for each one.

SELECT *
FROM tutorial.crunchbase_companies companies;

select column_name,data_type from information_schema.columns 
where table_schema = 'tutorial' and table_name = 'crunchbase_companies';

SELECT CAST(funding_total_usd AS varchar) AS funding_total_usd_string,
       founded_at_clean::varchar AS founded_at_string
  FROM tutorial.crunchbase_companies_clean_date;
  
-- Date time
SELECT permalink,
       founded_at
  FROM tutorial.crunchbase_companies_clean_date
 ORDER BY founded_at;
 
 -- working with timestamp column
 SELECT companies.permalink,
       companies.founded_at_clean,
       acquisitions.acquired_at_cleaned,
       acquisitions.acquired_at_cleaned -
         companies.founded_at_clean::timestamp AS time_to_acquisition
  FROM tutorial.crunchbase_companies_clean_date companies
  JOIN tutorial.crunchbase_acquisitions_clean_date acquisitions
    ON acquisitions.company_permalink = companies.permalink
 WHERE founded_at_clean IS NOT NULL;
 
 --- interval datatype
 SELECT companies.permalink,
       companies.founded_at_clean,
       companies.founded_at_clean::timestamp +
         INTERVAL '1 week' AS plus_one_week
  FROM tutorial.crunchbase_companies_clean_date companies
 WHERE founded_at_clean IS NOT NULL;
 
-- NOW()
SELECT companies.permalink,
       companies.founded_at_clean,
       NOW() - companies.founded_at_clean::timestamp AS founded_time_ago
  FROM tutorial.crunchbase_companies_clean_date companies
 WHERE founded_at_clean IS NOT NULL;
 
-- Write a query that counts the number of companies acquired within 3 years, 5 years, and 10 years 
-- of being founded (in 3 separate columns). 
-- Include a column for total companies acquired as well. 
-- Group by category and limit to only rows with a founding date.

SELECT companies.category_code,
       COUNT(CASE WHEN acquisitions.acquired_at_cleaned <= companies.founded_at_clean::timestamp + INTERVAL '3 years'
                       THEN 1 ELSE NULL END) AS acquired_3_yrs,
       COUNT(CASE WHEN acquisitions.acquired_at_cleaned <= companies.founded_at_clean::timestamp + INTERVAL '5 years'
                       THEN 1 ELSE NULL END) AS acquired_5_yrs,
       COUNT(CASE WHEN acquisitions.acquired_at_cleaned <= companies.founded_at_clean::timestamp + INTERVAL '10 years'
                       THEN 1 ELSE NULL END) AS acquired_10_yrs,
       COUNT(1) AS total
  FROM tutorial.crunchbase_companies_clean_date companies
  JOIN tutorial.crunchbase_acquisitions_clean_date acquisitions
    ON acquisitions.company_permalink = companies.permalink
 WHERE founded_at_clean IS NOT NULL
 GROUP BY 1
 ORDER BY 5 DESC;
 
 SELECT companies.category_code,
       COUNT(1)
  FROM tutorial.crunchbase_companies_clean_date companies
  JOIN tutorial.crunchbase_acquisitions_clean_date acquisitions
    ON acquisitions.company_permalink = companies.permalink
 WHERE founded_at_clean IS NOT NULL
 GROUP BY 1
 ORDER BY 2 DESC;
 
-- Data Wrangling
SELECT *
  FROM tutorial.sf_crime_incidents_2014_01;
-- LEFT, RIGHT
SELECT incidnt_num,
       date,
       LEFT(date, 10) AS cleaned_date,
       RIGHT(date, 17) AS cleaned_time
  FROM tutorial.sf_crime_incidents_2014_01;
  
-- TRIM
SELECT location,
       TRIM(both '()' FROM location) AS updated_location
  FROM tutorial.sf_crime_incidents_2014_01;
  
-- POSITION, STRPOS
SELECT incidnt_num,
       descript,
       POSITION('AN' IN descript) AS position_kw,
       STRPOS(descript, 'AN') AS strpos_KW
  FROM tutorial.sf_crime_incidents_2014_01;
  
-- SUBSTR
SELECT incidnt_num,
       date,
       SUBSTR(date, 7, 4) AS year
  FROM tutorial.sf_crime_incidents_2014_01;
  
-- Write a query that separates the `location` field into separate fields for latitude and longitude. 
-- You can compare your results against the actual `lat` and `lon` fields in the table.
SELECT location, lat, lon
  FROM tutorial.sf_crime_incidents_2014_01;
  
SELECT location,
  SUBSTR(location, 2, STRPOS(location, ',')-2) AS "latitude", lat,
  SUBSTR(location, STRPOS(location, ',')+1, LENGTH(location)-STRPOS(location, ',')-1) AS "longitude", lon
  FROM tutorial.sf_crime_incidents_2014_01;

SELECT location,
  TRIM(both '(,' FROM LEFT(location, POSITION(',' IN location))) AS "latitude", lat,
  TRIM(both ',)' FROM RIGHT(location, LENGTH(location) - POSITION(',' IN location))) AS "longitude", lon
  FROM tutorial.sf_crime_incidents_2014_01;
  
-- CONCAT
SELECT incidnt_num,
       day_of_week,
       LEFT(date, 10) AS cleaned_date,
       CONCAT(day_of_week, ', ', LEFT(date, 10)) AS day_and_date,
       CONCAT(day_of_week, LEFT(date, 10)) AS day_and_date_2
  FROM tutorial.sf_crime_incidents_2014_01;
  
-- Concatenate the lat and lon fields to form a field that is equivalent to the location field. 
-- (Note that the answer will have a different decimal precision.)
SELECT location,
  CONCAT('(',lat,',',lon,')') AS lat_lon
  FROM tutorial.sf_crime_incidents_2014_01;
  
SELECT location,
  '(' || lat || ',' || lon || ')' AS lat_lon
  FROM tutorial.sf_crime_incidents_2014_01;
  
-- Write a query that creates a date column formatted YYYY-MM-DD.
    SELECT incidnt_num,
           date,
           SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) || '-' || SUBSTR(date, 4, 2) AS CUSTOM_DATE
      FROM tutorial.sf_crime_incidents_2014_01;

-- UPPER and LOWER
SELECT incidnt_num,
       address,
       UPPER(address) AS address_upper,
       LOWER(address) AS address_lower
  FROM tutorial.sf_crime_incidents_2014_01;
  
-- Write a query that returns the `category` field, 
-- but with the first letter capitalized and the rest of the letters in lower-case.
SELECT incidnt_num,
       category,
       UPPER(LEFT(category, 1)) || LOWER(RIGHT(category, LENGTH(category) - 1)) AS category_updated
  FROM tutorial.sf_crime_incidents_2014_01;
  
-- Date
SELECT incidnt_num,
       date,
       (SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) ||
        '-' || SUBSTR(date, 4, 2))::date AS cleaned_date
  FROM tutorial.sf_crime_incidents_2014_01;
-- Write a query that creates an accurate timestamp using the date and time columns 
-- in tutorial.sf_crime_incidents_2014_01. 
-- Include a field that is exactly 1 week later as well.
SELECT incidnt_num,
       date, time,
       (SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) ||
        '-' || SUBSTR(date, 4, 2) || ' ' || time)::timestamp AS date_time,
        (SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) ||
        '-' || SUBSTR(date, 4, 2) || ' ' || time)::timestamp + INTERVAL '1 week' AS date_time_interval
FROM tutorial.sf_crime_incidents_2014_01;

  
-- More operations
SELECT *
  FROM tutorial.sf_crime_incidents_cleandate;
  
SELECT cleaned_date,
       EXTRACT('year'   FROM cleaned_date) AS year,
       EXTRACT('month'  FROM cleaned_date) AS month,
       EXTRACT('day'    FROM cleaned_date) AS day,
       EXTRACT('hour'   FROM cleaned_date) AS hour,
       EXTRACT('minute' FROM cleaned_date) AS minute,
       EXTRACT('second' FROM cleaned_date) AS second,
       EXTRACT('decade' FROM cleaned_date) AS decade,
       EXTRACT('dow'    FROM cleaned_date) AS day_of_week
  FROM tutorial.sf_crime_incidents_cleandate;
  
  SELECT cleaned_date,
       DATE_TRUNC('year'   , cleaned_date) AS year,
       DATE_TRUNC('month'  , cleaned_date) AS month,
       DATE_TRUNC('week'   , cleaned_date) AS week,
       DATE_TRUNC('day'    , cleaned_date) AS day,
       DATE_TRUNC('hour'   , cleaned_date) AS hour,
       DATE_TRUNC('minute' , cleaned_date) AS minute,
       DATE_TRUNC('second' , cleaned_date) AS second,
       DATE_TRUNC('decade' , cleaned_date) AS decade
  FROM tutorial.sf_crime_incidents_cleandate;
  
-- Write a query that counts the number of incidents reported by week. 
-- Cast the week as a date to get rid of the hours/minutes/seconds.
SELECT DATE_TRUNC('week', cleaned_date)::date AS week_start,
       COUNT(incidnt_num)
  FROM tutorial.sf_crime_incidents_cleandate
  GROUP BY 1
  ORDER BY 1;
  
  SELECT DATE_TRUNC('week', cleaned_date)::date AS week_beginning,
       COUNT(*) AS incidents
  FROM tutorial.sf_crime_incidents_cleandate
 GROUP BY 1
 ORDER BY 1;
 
 SELECT CURRENT_DATE AS date,
       CURRENT_TIME AS time,
       CURRENT_TIMESTAMP AS timestamp,
       LOCALTIME AS localtime,
       LOCALTIMESTAMP AS localtimestamp,
       NOW() AS now;
       
SELECT CURRENT_TIME AS time,
       CURRENT_TIME AT TIME ZONE 'PST' AS time_pst;

-- Write a query that shows exactly how long ago each indicent was reported. 
-- Assume that the dataset is in Pacific Standard Time (UTC - 8)
SELECT incidnt_num,
       cleaned_date,
       NOW() AT TIME ZONE 'PST' AS now,
       NOW() AT TIME ZONE 'PST' - cleaned_date AS time_ago 
  FROM tutorial.sf_crime_incidents_cleandate;  
  
-- COALEESCE
SELECT incidnt_num,
       descript,
       COALESCE(descript, 'No Description')
  FROM tutorial.sf_crime_incidents_cleandate
 ORDER BY descript DESC;