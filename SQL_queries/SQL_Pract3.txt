SELECT * FROM tutorial.aapl_historical_stock_price;

// Count 
SELECT COUNT(*)
  FROM tutorial.aapl_historical_stock_price;
  
SELECT COUNT(1)
  FROM tutorial.aapl_historical_stock_price;
  
-- Write a query to count the number of non-null rows in the low column.
-- both give same result, the second one is correct
SELECT COUNT("low")
  FROM tutorial.aapl_historical_stock_price
  WHERE low IS NOT NULL;

SELECT COUNT(low) AS low
  FROM tutorial.aapl_historical_stock_price;
  
-- both works fine
SELECT COUNT(date) AS count_of_date
  FROM tutorial.aapl_historical_stock_price;
  
SELECT COUNT(date) AS "Count Of Date"
  FROM tutorial.aapl_historical_stock_price;
  
SELECT COUNT(2)
  FROM tutorial.aapl_historical_stock_price;
  
-- Write a query that determines counts of every single column.
-- With these counts, can you tell which column has the most null values?
SELECT COUNT(year) AS year,
       COUNT(month) AS month,
       COUNT(open) AS open,
       COUNT(high) AS high,
       COUNT(low) AS low,
       COUNT(close) AS close,
       COUNT(volume) AS volume
  FROM tutorial.aapl_historical_stock_price;

-- below one doesn't work
SELECT COUNT(2) AS year,
       COUNT(3) AS month,
       COUNT(4) AS open,
       COUNT(5) AS high,
       COUNT(6) AS low,
       COUNT(7) AS close,
       COUNT(8) AS volume
  FROM tutorial.aapl_historical_stock_price;
  -- this doesn't work
  SELECT COUNT(year, volume) AS count_year
  FROM tutorial.aapl_historical_stock_price;
  
  -- Write a query to calculate the average opening price 
  -- (hint: you will need to use both COUNT and SUM, as well as some simple arithmetic.).
  SELECT SUM(open)/COUNT(open) AS average_opening_price
  FROM tutorial.aapl_historical_stock_price;
  
  -- What was Apple's lowest stock price (at the time of this data collection)?
  SELECT MIN(low) as lowest_stock_price
  FROM tutorial.aapl_historical_stock_price;
  
-- What was the highest single-day increase in Apple's share value?
SELECT MAX(close - open) as highest_single_day_increase
FROM tutorial.aapl_historical_stock_price;

-- AVG keyword
SELECT AVG(high)
  FROM tutorial.aapl_historical_stock_price
 WHERE high IS NOT NULL;

SELECT AVG(high)
  FROM tutorial.aapl_historical_stock_price;
  
--Write a query that calculates the average daily trade volume for Apple stock.
SELECT AVG(volume) as "avg_dailt_trade_volume"
  FROM tutorial.aapl_historical_stock_price;

-- GROUP BY keyword
SELECT year,
       COUNT(*) AS count
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year;

SELECT year,
       month,
       COUNT(*) AS count
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year, month
 ORDER BY year, month;
 
 --Calculate the total number of shares traded each month. Order your results chronologically.
 
SELECT year,
       month,
       SUM(volume) AS total_monthly_volume
  FROM tutorial.aapl_historical_stock_price
  GROUP BY year, month
 ORDER BY year, month;
  
SELECT year,
       month,
       SUM(volume) AS total_monthly_volume
  FROM tutorial.aapl_historical_stock_price
  GROUP BY 2, 3
  ORDER BY 2, 3;
  
SELECT * 
FROM tutorial.aapl_historical_stock_price;

-- Write a query to calculate the average daily price change in Apple stock, grouped by year.
SELECT *
  FROM tutorial.aapl_historical_stock_price;
  
SELECT year, AVG(close - open) as AVG_price_change
  FROM tutorial.aapl_historical_stock_price
  GROUP BY year;
  
-- Write a query that calculates the lowest and highest prices that Apple stock achieved each month.
SELECT year, month, MAX(high) as monthly_highest, MIN(low) as monthly_lowest
  FROM tutorial.aapl_historical_stock_price
  GROUP BY year, month
  ORDER BY year, month;
  
-- HAVING keyword
SELECT year,
       month,
       MAX(high) AS month_high
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year, month
 HAVING MAX(high) > 400
 ORDER BY year, month;

SELECT year, month, MAX(high) as monthly_highest, MIN(low) as monthly_lowest
  FROM tutorial.aapl_historical_stock_price
  GROUP BY year, month
  HAVING MAX(high) - MIN(low) > 20
  ORDER BY year, month;

 -- Case Keyword
SELECT * FROM benn.college_football_players;

SELECT player_name,
       year,
       CASE WHEN year = 'SR' THEN 'yes'
            ELSE NULL END AS is_a_senior
  FROM benn.college_football_players;
  
SELECT player_name,
       year,
       CASE WHEN year = 'SR' THEN 'yes'
            ELSE 'no' END AS is_a_senior
  FROM benn.college_football_players;
  
-- Write a query that includes a column that is flagged "yes" when a player is from California, 
-- and sort the results with those players first.
SELECT * FROM benn.college_football_players;

SELECT player_name,
       state,
       CASE WHEN state = 'CA' THEN 'yes'
            ELSE NULL END AS is_from_California
  FROM benn.college_football_players
  ORDER BY is_from_California;
  

SELECT player_name,
       state,
       CASE WHEN state = 'CA' THEN 'yes'
            ELSE NULL END AS is_from_California
  FROM benn.college_football_players
  ORDER BY 3 DESC;
  
  
SELECT player_name,
       state,
       CASE WHEN state = 'CA' THEN 'yes'
            END AS is_from_California
  FROM benn.college_football_players
  ORDER BY 3 DESC;
  
  -- multiple columns in CASE
  SELECT player_name,
       weight,
       CASE WHEN weight > 250 THEN 'over 250'
            WHEN weight > 200 THEN '201-250'
            WHEN weight > 175 THEN '176-200'
            ELSE '175 or under' END AS weight_group
  FROM benn.college_football_players;
  
  -- better alternative of the prev query
  SELECT player_name,
       weight,
       CASE WHEN weight > 250 THEN 'over 250'
            WHEN weight > 200 AND weight <= 250 THEN '201-250'
            WHEN weight > 175 AND weight <= 200 THEN '176-200'
            ELSE '175 or under' END AS weight_group
  FROM benn.college_football_players;
  
  -- Write a query that includes players' names and a column that classifies them into four categories based 
  -- on height. 
  -- Keep in mind that the answer we provide is only one of many possible answers, 
  -- since you could divide players' heights in many ways.
SELECT DISTINCT(height)
  FROM benn.college_football_players
  ORDER BY height;

SELECT player_name,
       height,
       CASE WHEN height > 80 THEN 'above 80'
            WHEN height > 70 AND height <= 80 THEN '70-80'
            WHEN height > 60 AND height <= 70 THEN '60-70'
            ELSE 'below 60' END AS height_group
  FROM benn.college_football_players;
  
-- Write a query that selects all columns from benn.college_football_players and
-- adds an additional column that displays the player's name if that player is a 
-- junior or senior.
SELECT *,
  CASE WHEN year IN ('SR', 'JR') THEN player_name
  ELSE NULL END AS Senior_junior_playes
  FROM benn.college_football_players;
  
SELECT *,
  CASE WHEN year = 'SR' OR year = 'JR' THEN player_name
  ELSE NULL END AS Senior_junior_playes
  FROM benn.college_football_players;
  
-- CASE with aggregate function
  SELECT CASE WHEN year = 'FR' THEN 'FR'
            ELSE 'Not FR' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
  GROUP BY CASE WHEN year = 'FR' THEN 'FR'
               ELSE 'Not FR' END;
               
SELECT COUNT(1) AS fr_count
  FROM benn.college_football_players
  WHERE year = 'FR'
  
SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY 1;
 
 SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY year_group;
 
 -- another less efficient alternative
 SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY CASE WHEN year = 'FR' THEN 'FR'
               WHEN year = 'SO' THEN 'SO'
               WHEN year = 'JR' THEN 'JR'
               WHEN year = 'SR' THEN 'SR'
               ELSE 'No Year Data' END;
               
-- Write a query that counts the number of 300lb+ players for each 
-- of the following regions: West Coast (CA, OR, WA), Texas, and Other 
-- (everywhere else).
SELECT 
CASE WHEN state IN ('CA', 'OR', 'WA') THEN 'West Coast'
    WHEN state = 'TX' THEN 'Texas'
    ELSE 'Other' END AS state_group, count(1) as count
FROM benn.college_football_players
WHERE weight > 300
GROUP BY 1;

-- Can't use alias name for count
SELECT 
CASE WHEN state IN ('CA', 'OR', 'WA') THEN 'West Coast'
    WHEN state = 'TX' THEN 'Texas'
    ELSE 'Other' END AS state_group, count(state_group) as count
FROM benn.college_football_players
WHERE weight > 300
GROUP BY state_group;


-- Write a query that calculates the combined weight of all underclass players
-- (FR/SO) in California as well as the combined weight of all upperclass players
-- (JR/SR) in California.
SELECT 
CASE WHEN year IN ('FR', 'SO') THEN 'underclass players'
    WHEN year IN ('JR', 'SR') THEN 'upperclass players'
    END as year_group, SUM(weight) as combined_weight
FROM benn.college_football_players
WHERE state = 'CA'
GROUP BY 1;

SELECT CASE WHEN year IN ('FR', 'SO') THEN 'underclass'
            WHEN year IN ('JR', 'SR') THEN 'upperclass'
            ELSE NULL END AS class_group,
       SUM(weight) AS combined_player_weight
  FROM benn.college_football_players
 WHERE state = 'CA'
 GROUP BY 1;
 
 -- COUNT 
 SELECT COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count
  FROM benn.college_football_players;
  
  -- Write a query that displays the number of players in each state, with FR, SO, JR, 
  -- and SR players in separate columns and another column for the total number of players.
  -- Order results such that states with the most players come first.
  
 SELECT state,
       COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count, 
       COUNT(CASE WHEN year IN ('SR', 'JR', 'SO', 'FR') THEN 1 ELSE NULL END) AS total_count
  FROM benn.college_football_players
  GROUP BY state
  ORDER BY total_count DESC;
  
  SELECT state,
       COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count, 
       COUNT(year) AS total_count
  FROM benn.college_football_players
  GROUP BY state
  ORDER BY total_count DESC;
  
-- Write a query that shows the number of players at schools with names that start with A through
-- M, and the number at schools with names starting with N - Z.
SELECT 
  COUNT(CASE WHEN school_name < 'N' THEN 1 ELSE NULL END) AS count_A_to_M,
  COUNT(CASE WHEN school_name >= 'N' THEN 1 ELSE NULL END)  AS count_N_to_Z
FROM benn.college_football_players;

SELECT CASE WHEN school_name < 'n' THEN 'A-M'
            WHEN school_name >= 'n' THEN 'N-Z'
            ELSE NULL END AS school_name_group,
       COUNT(1) AS players
  FROM benn.college_football_players
 GROUP BY 1;
