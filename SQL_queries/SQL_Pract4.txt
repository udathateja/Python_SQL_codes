-- DISTINCT
SELECT DISTINCT month
  FROM tutorial.aapl_historical_stock_price;
  
SELECT DISTINCT year, month
  FROM tutorial.aapl_historical_stock_price
  ORDER BY year, month;
  
-- Write a query that returns the unique values in the year column,
-- in chronological order.
SELECT DISTINCT year
  FROM tutorial.aapl_historical_stock_price
  ORDER BY year;

-- Write a query that separately counts the number of unique values in the month 
-- column and the number of unique values in the `year` column.
SELECT COUNT(DISTINCT(year)) AS years, COUNT(DISTINCT(month)) AS months
  FROM tutorial.aapl_historical_stock_price;

-- JOIN
SELECT teams.conference AS conference,
       AVG(players.weight) AS average_weight
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
 GROUP BY teams.conference
 ORDER BY AVG(players.weight) DESC;
 
 -- Write a query that selects the school name, player name, position, and weight 
 -- for every player in Georgia, ordered by weight (heaviest to lightest). Be 
 -- sure to make an alias for the table, and to reference all column names in 
 -- relation to the alias.
 
 SELECT school_name,
       players.player_name,
       players.position,
       players.weight
  FROM benn.college_football_players players
 WHERE players.state = 'GA'
 ORDER BY players.weight DESC;
 
 SELECT *
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name;
    
-- INNER JOIN
SELECT players.*,
       teams.*
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name;
    
SELECT players.school_name AS players_school_name,
       teams.school_name AS teams_school_name
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name;
    
-- Write a query that displays player names, school names and conferences for 
-- schools in the "FBS (Division I-A Teams)" division.
SELECT 
       players.player_name,
       players.school_name,
       teams.conference
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
    WHERE teams.division = 'FBS (Division I-A Teams)';
    
  -- OUTER JOIN
  SELECT companies.permalink AS companies_permalink,
       companies.name AS companies_name,
       acquisitions.company_permalink AS acquisitions_permalink,
       acquisitions.acquired_at AS acquired_date
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink;
    
-- Write a query that performs an inner join between the tutorial.crunchbase_acquisitions table and 
-- the tutorial.crunchbase_companies table, but instead of listing individual rows, 
-- count the number of non-null rows in each table.
SELECT 
  COUNT(companies.permalink) AS companies_rowcount, 
  COUNT(acquisitions.company_permalink) AS acquisitions_rowcount
  FROM tutorial.crunchbase_companies companies
  JOIN tutorial.crunchbase_acquisitions acquisitions
  ON companies.permalink = acquisitions.company_permalink;
  
--Modify the query above to be a LEFT JOIN. Note the difference in results.
SELECT 
  COUNT(companies.permalink) AS companies_rowcount, 
  COUNT(acquisitions.company_permalink) AS acquisitions_rowcount
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
  ON companies.permalink = acquisitions.company_permalink;
  
-- Count the number of unique companies (don't double-count companies) and unique acquired companies by state. 
-- Do not include results for which there is no state data, and 
-- order by the number of acquired companies from highest to lowest.
SELECT 
  companies.state_code,
  COUNT(DISTINCT(companies.permalink)) AS companies_count, 
  COUNT(DISTINCT(acquisitions.company_permalink)) AS acquisitions_count
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
  ON companies.permalink = acquisitions.company_permalink
  WHERE companies.state_code IS NOT NULL
  GROUP BY 1
  ORDER BY 3 DESC;
  

SELECT 
  companies.state_code,
  COUNT(DISTINCT(companies.permalink)) AS companies_count, 
  COUNT(DISTINCT(acquisitions.company_permalink)) AS acquisitions_count
  FROM tutorial.crunchbase_companies companies
  RIGHT JOIN tutorial.crunchbase_acquisitions acquisitions
  ON companies.permalink = acquisitions.company_permalink
  WHERE companies.state_code IS NOT NULL
  GROUP BY 1
  ORDER BY 3 DESC;
  
-- Write a query that shows a company's name, "status" (found in the Companies table), 
-- and the number of unique investors in that company. 
-- Order by the number of investors from most to fewest. Limit to only companies in the state of New York.

SELECT 
  companies.name,
  companies.status,
  COUNT(DISTINCT(acquisitions.company_permalink)) AS investor_count
  FROM tutorial.crunchbase_companies companies
  RIGHT JOIN tutorial.crunchbase_acquisitions acquisitions
  ON companies.permalink = acquisitions.company_permalink
  AND companies.state_code = 'NY'
  GROUP BY 1,2
  ORDER BY 3 DESC;
  
SELECT 
  companies.name AS company_name,
  companies.status AS company_status,
  COUNT(DISTINCT(acquisitions.company_permalink)) AS investor_count
  FROM tutorial.crunchbase_companies companies
  RIGHT JOIN tutorial.crunchbase_acquisitions acquisitions
  ON companies.permalink = acquisitions.company_permalink
  AND companies.state_code = 'NY'
  GROUP BY 1,2
  ORDER BY 3 DESC;
  
-- Write a query that lists investors based on the number of companies in which they are invested. 
-- Include a row for companies with no investor, and order from most companies to least.
SELECT CASE WHEN investments.investor_name IS NULL THEN 'No Investors'
            ELSE investments.investor_name END AS investor_name,
       COUNT(DISTINCT companies.permalink) AS companies_invested_in
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1
 ORDER BY 2 DESC;
 
-- FULL JOIN
SELECT COUNT(CASE WHEN companies.permalink IS NOT NULL AND acquisitions.company_permalink IS NULL
                  THEN companies.permalink ELSE NULL END) AS companies_only,
       COUNT(CASE WHEN companies.permalink IS NOT NULL AND acquisitions.company_permalink IS NOT NULL
                  THEN companies.permalink ELSE NULL END) AS both_tables,
       COUNT(CASE WHEN companies.permalink IS NULL AND acquisitions.company_permalink IS NOT NULL
                  THEN acquisitions.company_permalink ELSE NULL END) AS acquisitions_only
  FROM tutorial.crunchbase_companies companies
  FULL JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink;

-- Write a query that joins tutorial.crunchbase_companies and tutorial.crunchbase_investments_part1 
-- using a FULL JOIN. Count up the number of rows that are matched/unmatched.

SELECT 
  COUNT(CASE WHEN companies.permalink IS NOT NULL AND investors.investor_permalink IS NULL THEN 1 END) AS companies_only,
  COUNT(CASE WHEN companies.permalink IS NULL AND investors.investor_permalink IS NOT NULL THEN 1 END) AS investors_only,
  COUNT(CASE WHEN companies.permalink IS NOT NULL AND investors.investor_permalink IS NOT NULL THEN 1 END) AS companies_with_investors
FROM tutorial.crunchbase_companies companies FULL JOIN
tutorial.crunchbase_investments_part1 investors
ON companies.permalink = investors.company_permalink;

    SELECT COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NULL
                      THEN companies.permalink ELSE NULL END) AS companies_only,
           COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NOT NULL
                      THEN companies.permalink ELSE NULL END) AS both_tables,
           COUNT(CASE WHEN companies.permalink IS NULL AND investments.company_permalink IS NOT NULL
                      THEN investments.company_permalink ELSE NULL END) AS investments_only
      FROM tutorial.crunchbase_companies companies
      FULL JOIN tutorial.crunchbase_investments_part1 investments
        ON companies.permalink = investments.company_permalink;
        
-- UNION keyword
SELECT *
  FROM tutorial.crunchbase_investments_part1
 UNION
 SELECT *
   FROM tutorial.crunchbase_investments_part2;
   
SELECT *
  FROM tutorial.crunchbase_investments_part1
 UNION ALL
 SELECT *
   FROM tutorial.crunchbase_investments_part2;
   
-- Write a query that appends the two crunchbase_investments datasets above (including duplicate values). 
-- Filter the first dataset to only companies with names that start with the letter "T", and filter the second 
-- to companies with names starting with "M" (both not case-sensitive). 
-- Only include the company_permalink, company_name, and investor_name columns.

SELECT company_permalink, company_name, investor_name
  FROM tutorial.crunchbase_investments_part1 part1
WHERE part1.company_name ILIKE 't%'
UNION ALL
SELECT company_permalink, company_name, investor_name
  FROM tutorial.crunchbase_investments_part1 part2
WHERE part2.company_name ILIKE 'm%';

-- Write a query that shows 3 columns. The first indicates which dataset (part 1 or 2) the data comes from, 
-- the second shows company status, and the third is a count of the number of investors.
SELECT 'investments_part1' AS dataset,
       companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part1 investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1,2

 UNION ALL
 
 SELECT 'investments_part2' AS dataset,
       companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part2 investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1,2;
 
 -- comparison operators with joins
 SELECT companies.permalink,
       companies.name,
       companies.status,
       COUNT(investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part1 investments
    ON companies.permalink = investments.company_permalink
   AND investments.funded_year > companies.founded_year + 5
 GROUP BY 1,2,3;
 
 -- Self Joining Tables
 SELECT DISTINCT japan_investments.company_name,
	   japan_investments.company_permalink
  FROM tutorial.crunchbase_investments_part1 japan_investments
  JOIN tutorial.crunchbase_investments_part1 gb_investments
    ON japan_investments.company_name = gb_investments.company_name
   AND gb_investments.investor_country_code = 'GBR'
   AND gb_investments.funded_at > japan_investments.funded_at
 WHERE japan_investments.investor_country_code = 'JPN'
 ORDER BY 1;